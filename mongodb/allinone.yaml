# helm repo add bitnami https://charts.bitnami.com/bitnami
# helm install instance bitnami/mongodb --dry-run > allinone.yaml
# comment all except the YAML's


# NAME: instance
# LAST DEPLOYED: Thu Jun  3 09:58:57 2021
# NAMESPACE: mongotest
# STATUS: pending-install
# REVISION: 1
# TEST SUITE: None
# HOOKS:
# MANIFEST:
---
# Source: mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: instance-mongodb
  # namespace: mongotest
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.18.0
    app.kubernetes.io/instance: instance
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: instance-mongodb
---
# Source: mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: instance-mongodb
  # namespace: mongotest
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.18.0
    app.kubernetes.io/instance: instance
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "dW5heFBHa04wQw=="
---
# Source: mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: instance-mongodb
  # namespace: mongotest
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.18.0
    app.kubernetes.io/instance: instance
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: instance-mongodb
  # namespace: mongotest
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.18.0
    app.kubernetes.io/instance: instance
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: instance
    app.kubernetes.io/component: mongodb
---
# Source: mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: instance-mongodb
  # namespace: mongotest
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.18.0
    app.kubernetes.io/instance: instance
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: instance
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.18.0
        app.kubernetes.io/instance: instance
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: instance-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: instance
                    app.kubernetes.io/component: mongodb
                # namespaces:
                #   - "mongotest"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        # fsGroup: ""
        sysctls: []
      containers:
        - name: mongodb
          # image: docker.io/bitnami/mongodb
          image: quay.io/bitnami/mongodb
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            # runAsUser: 1000760001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: instance-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: instance-mongodb

# NOTES:
# ** Please be patient while the chart is being deployed **

# MongoDB(R) can be accessed on the following DNS name(s) and ports from within your cluster:

#     instance-mongodb.mongotest.svc.cluster.local

# To get the root password run:

#     export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace mongotest instance-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)

# To connect to your database, create a MongoDB(R) client container:

#     kubectl run --namespace mongotest instance-mongodb-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image docker.io/bitnami/mongodb:4.4.6-debian-10-r8 --command -- bash

# Then, run the following command:
#     mongo admin --host "instance-mongodb" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD

# To connect to your database from outside the cluster execute the following commands:

#     kubectl port-forward --namespace mongotest svc/instance-mongodb 27017:27017 &
#     mongo --host 127.0.0.1 --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD
